<<<<<<< HEAD
menu "Kernel hacking"

source "lib/Kconfig.debug"

config DEBUG_RODATA
       bool "Write protect kernel read-only data structures"
       depends on DEBUG_KERNEL
       help
         Mark the kernel read-only data as write-protected in the pagetables,
         in order to catch accidental (and incorrect) writes to such const
         data. This option may have a slight performance impact because a
         portion of the kernel code won't be covered by a TLB anymore.
         If in doubt, say "N".

config DEBUG_STRICT_USER_COPY_CHECKS
	bool "Strict copy size checks"
	depends on DEBUG_KERNEL && !TRACE_BRANCH_PROFILING
	---help---
	  Enabling this option turns a certain set of sanity checks for user
	  copy operations into compile time failures.

	  The copy_from_user() etc checks are there to help test if there
	  are sufficient security checks on the length argument of
	  the copy operation, by having gcc prove that the argument is
	  within bounds.

	  If unsure, or if you run an older (pre 4.4) gcc, say N.

endmenu
=======
# SPDX-License-Identifier: GPL-2.0
#
config LIGHTWEIGHT_SPINLOCK_CHECK
	bool "Enable lightweight spinlock checks"
	depends on DEBUG_KERNEL && SMP && !DEBUG_SPINLOCK
	default y
	help
	  Add checks with low performance impact to the spinlock functions
	  to catch memory overwrites at runtime. For more advanced
	  spinlock debugging you should choose the DEBUG_SPINLOCK option
	  which will detect unitialized spinlocks too.
	  If unsure say Y here.

config TLB_PTLOCK
	bool "Use page table locks in TLB fault handler"
	depends on DEBUG_KERNEL && SMP
	default n
	help
	  Select this option to enable page table locking in the TLB
	  fault handler. This ensures that page table entries are
	  updated consistently on SMP machines at the expense of some
	  loss in performance.

>>>>>>> 26f1d324c6e (tools: use basename to identify file in gen-mach-types)
